<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>opengl on PysKa's Writeups</title><link>https://pyska-ratzinger.github.io/tags/opengl/</link><description>Recent content in opengl on PysKa's Writeups</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>ricardojorge512@hotmail.com (PysKa Ratzinger)</managingEditor><webMaster>ricardojorge512@hotmail.com (PysKa Ratzinger)</webMaster><lastBuildDate>Tue, 27 Feb 2024 13:04:04 +0000</lastBuildDate><atom:link href="https://pyska-ratzinger.github.io/tags/opengl/index.xml" rel="self" type="application/rss+xml"/><item><title>Pixel_perfect_rendering</title><link>https://pyska-ratzinger.github.io/posts/2024-02-27-pixel-perfect-rendering/</link><pubDate>Tue, 27 Feb 2024 13:04:04 +0000</pubDate><author>ricardojorge512@hotmail.com (PysKa Ratzinger)</author><guid>https://pyska-ratzinger.github.io/posts/2024-02-27-pixel-perfect-rendering/</guid><description>Summary In this blog post I will describe how you can draw pixel perfect graphics using OpenGL, to achieve a result similar to this:
We will achieve this by first rendering the game world into a small framebuffer with only the necessary pixels, and then rendering this framebuffer onto the screen with a slight offset, such that the camera appears to be exactly where it needs to be.
Rendering into pixel perfect framebuffer First, we need to decide on the resolution to render the game at.</description></item></channel></rss>